package com.cheysokmean.visacalculator

import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import java.time.LocalDate
import java.time.Period
import java.time.format.DateTimeParseException
import java.time.temporal.ChronoUnit

class MainActivity : AppCompatActivity() {

    private lateinit var textViewCurrentDate: TextView
    private lateinit var editTextExpiryDate: EditText
    private lateinit var buttonCalculate: Button
    private lateinit var textViewMonths: TextView
    private lateinit var textViewWeeks: TextView
    private lateinit var textViewMonthsPrecise: TextView
    private lateinit var textViewError: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main) // Match your layout file name

        // Initialize UI elements
        textViewCurrentDate = findViewById(R.id.textViewCurrentDate)
        editTextExpiryDate = findViewById(R.id.editTextExpiryDate)
        buttonCalculate = findViewById(R.id.buttonCalculate)
        textViewMonths = findViewById(R.id.textViewMonths)
        textViewWeeks = findViewById(R.id.textViewWeeks)
        textViewMonthsPrecise = findViewById(R.id.textViewMonthsPrecise)
        textViewError = findViewById(R.id.textViewError)

        // Set current date in the TextView
        textViewCurrentDate.text = LocalDate.now().toString()

        buttonCalculate.setOnClickListener {
            calculateRemainingTime()
        }
    }

    private fun calculateRemainingTime() {
        textViewError.text = "" // Clear previous errors
        val currentDate = LocalDate.now()

        try {
            val expiryDate = LocalDate.parse(editTextExpiryDate.text.toString())

            if (expiryDate.isBefore(currentDate)) {
                textViewError.text = "Expiry date cannot be in the past"
                return
            }

            val period = Period.between(currentDate, expiryDate)
            val remainingMonths = period.years * 12 + period.months
            val remainingWeeks = ChronoUnit.WEEKS.between(currentDate, expiryDate)
            val remainingMonthsPrecise = String.format("%.2f", (ChronoUnit.MONTHS.between(currentDate, expiryDate).toDouble() / 12 + period.months))

            textViewMonths.text = "$remainingMonths"
            textViewWeeks.text = "$remainingWeeks"
            textViewMonthsPrecise.text = remainingMonthsPrecise

        } catch (e: DateTimeParseException) {
            textViewError.text = "Invalid date format (YYYY-MM-DD)"
        }
    }
}
